{"mappings":"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","sources":["src/script.ts"],"sourcesContent":["class Field {\n  constructor(x: Number, y: Number) {\n    this.x = x;\n    this.y = y;\n    this.occupied = false;\n    this.occupiedBy = null;\n  }\n\n  getPosition() {\n    return { x: this.x, y: this.y };\n  }\n\n  toggleOccupied(value, occupiedBy = null) {\n    this.occupied = value;\n    this.occupiedBy = value ? occupiedBy : null;\n  }\n\n  getHtml() {\n    return `<div class=\"game_object field ${\n      this.occupied ? \"field--occupied\" : \"\"\n    }\" style=\"top: ${this.y * 25}px; left: ${this.x * 25}px\" data-x=\"${\n      this.x\n    }\" data-y=\"${this.y}\"></div>`;\n  }\n}\n\nclass Map {\n  constructor() {\n    this.fields = this.generateFields();\n  }\n\n  generateFields() {\n    const map = [];\n    const xLength = 50;\n    const yLength = 20;\n    for (let i = 0; i < xLength; i++) {\n      for (let j = 0; j < yLength; j++) {\n        map.push(new Field(i, j));\n      }\n    }\n    return map;\n  }\n\n  getFields() {\n    return this.fields;\n  }\n\n  generateHTMLMap() {\n    const htmlMap = this.fields\n      .map((field) => {\n        return field.getHtml();\n      })\n      .join(\"\");\n\n    return htmlMap;\n  }\n}\n\nclass Entity {\n  constructor(mapElement, fields, type = \"entity\", x = 0, y = 0) {\n    this.mapElement = mapElement;\n    this.fields = fields;\n    this.type = type;\n    this.id = this.generateId(type);\n    this.x = x;\n    this.y = y;\n    this.hp = 100;\n    this.speed = 1;\n\n    this.spawnOnMap();\n  }\n\n  generateId(type) {\n    const timestamp = Date.now();\n    const randomPart = Math.floor(Math.random() * 1000);\n    return `${type}-${timestamp}-${randomPart}`;\n  }\n\n  takeDamage(value) {\n    this.hp -= value;\n    if (this.hp <= 0) {\n      this.die();\n      return;\n    }\n    this.resetPosition();\n  }\n\n  die() {\n    this.hp = 0;\n    this.removeFromMap();\n    GameEventEmitter.emit(\"died\", this, { type: this.type });\n  }\n\n  isAlive() {\n    return this.hp > 0;\n  }\n\n  getHtml(x, y) {\n    return `<div id=\"${this.id}\" class=\"game_object ${this.type}\" style=\"top: ${\n      y * 25\n    }px; left: ${x * 25}px\" data-x=\"${x}\" data-y=\"${y}\">\n    \n      <span class=\"hp_bar\">${this.hp}</span>\n    </div>`;\n  }\n\n  spawnOnMap() {\n    const entity = this.getHtml(this.x, this.y);\n\n    const isFieldAvailable = this.checkIsFieldAvailable(this.x, this.y);\n\n    if (this.mapElement && isFieldAvailable) {\n      this.mapElement.innerHTML += entity;\n    }\n\n    this.setIsOccupied(this.x, this.y, true);\n  }\n\n  removeFromMap() {\n    const existingEntity = document.getElementById(this.id);\n    if (existingEntity) {\n      existingEntity.remove();\n    }\n    this.setIsOccupied(this.x, this.y, false);\n  }\n\n  resetPosition() {\n    this.removeFromMap();\n    this.spawnOnMap();\n  }\n\n  checkIsFieldAvailable(x, y) {\n    return this.fields.some((field) => {\n      const fieldPosition = field.getPosition();\n      return fieldPosition.x === x && fieldPosition.y === y && !field.occupied;\n    });\n  }\n\n  setIsOccupied(x, y, value) {\n    const field = this.fields.find((field) => field.x === x && field.y === y);\n    if (field) {\n      field.toggleOccupied(value, this);\n    }\n  }\n\n  getPlayerPosition() {\n    const element = document.getElementsByClassName(\"player\")[0];\n    if (element) {\n      return {\n        x: parseInt(element.dataset.x, 10),\n        y: parseInt(element.dataset.y, 10),\n      };\n    }\n    return null;\n  }\n\n  attackElement(element) {\n    GameEventEmitter.emit(\"attack\", this, { id: element.id }, 10);\n  }\n\n  getElementOccupiedField(x, y) {\n    const field = this.fields.find((field) => field.x === x && field.y === y);\n    return field && field.occupiedBy;\n  }\n\n  move(axis, direction) {\n    const initialX = this.x;\n    const initialY = this.y;\n    const newX = axis === \"x\" ? this.x + direction : this.x;\n    const newY = axis === \"y\" ? this.y + direction : this.y;\n\n    const elementOccupiedField = this.getElementOccupiedField(newX, newY);\n    if (elementOccupiedField) {\n      this.attackElement(elementOccupiedField);\n      return;\n    }\n\n    if (!this.checkIsFieldAvailable(newX, newY)) {\n      return;\n    }\n\n    this[axis] += direction;\n    this.resetPosition();\n    this.setIsOccupied(initialX, initialY, false);\n    this.setIsOccupied(newX, newY, true);\n\n    GameEventEmitter.emit(\n      \"moved\",\n      this,\n      { type: \"enemy\" },\n      {\n        x: this.x,\n        y: this.y,\n      }\n    );\n  }\n\n  moveLeft() {\n    this.move(\"x\", -this.speed);\n  }\n  moveRight() {\n    this.move(\"x\", this.speed);\n  }\n  moveUp() {\n    this.move(\"y\", -this.speed);\n  }\n  moveDown() {\n    this.move(\"y\", this.speed);\n  }\n}\n\nclass Enemy extends Entity {\n  constructor(mapElement, fields, x, y) {\n    super(mapElement, fields, \"enemy\", x, y);\n  }\n\n  chargePlayer() {\n    if (this.hp <= 0) {\n      return;\n    }\n    const playerPosition = this.getPlayerPosition();\n    if (!playerPosition) return;\n    const { x: playerX, y: playerY } = playerPosition || {};\n    if (!playerX || !playerY) return;\n\n    if (this.x < playerX) {\n      this.moveRight();\n    } else if (this.x > playerX) {\n      this.moveLeft();\n    } else if (this.y < playerY) {\n      this.moveDown();\n    } else if (this.y > playerY) {\n      this.moveUp();\n    }\n  }\n}\n\nclass Player extends Entity {\n  constructor(mapElement, fields, x, y) {\n    super(mapElement, fields, \"player\", x, y);\n    this.hp = 200;\n    this.resetPosition();\n    this.addMoveListener();\n  }\n\n  addMoveListener() {\n    document.addEventListener(\"keydown\", (event) => {\n      const key = event.key;\n      switch (key) {\n        case \"ArrowUp\":\n          this.moveUp();\n          break;\n        case \"ArrowDown\":\n          this.moveDown();\n          break;\n        case \"ArrowLeft\":\n          this.moveLeft();\n          break;\n        case \"ArrowRight\":\n          this.moveRight();\n          break;\n        case \" \":\n          return;\n        default:\n          return; // Exit if not an arrow key\n      }\n    });\n  }\n}\n\nclass Wall extends Entity {\n  constructor(mapElement, fields, x, y) {\n    super(mapElement, fields, \"wall\", x, y);\n  }\n}\n\n// class GameLoop {\n//   constructor(map, entities) {\n//     this.map = map;\n//     this.entities = entities;\n\n//     document.addEventListener(\"enemyattack\", () => {\n//       console.log(\"player was attacked\");\n//     });\n\n//     document.addEventListener(\"playerattack\", () => {\n//       console.log(\"enemy was attacked\");\n//     });\n//   }\n\n//   getPlayer() {\n//     return this.entities.find((entity) => entity.name === \"player\");\n//   }\n\n//   getEnemy() {\n//     return this.entities.find((entity) => entity.name === \"enemy\");\n//   }\n// }\n\nclass GameEventEmitter {\n  static emit(type, sender, target, value) {\n    const evt = new CustomEvent(type, {\n      detail: {\n        type,\n        sender,\n        target,\n        value,\n      },\n    });\n    document.dispatchEvent(evt);\n  }\n}\n\n// interface GameEvent {\n//   type: \"attack\",\n//   sender: player,\n//   target: { type: \"enemy\", id: \"enemy-123\" },\n//   value: 5,\n// }\n\nclass GameEventListener {\n  constructor(entities) {\n    this.entities = entities;\n    this.listenToEvents();\n  }\n\n  handleAttack(targetEntity, sender, value) {\n    targetEntity.takeDamage(value);\n    if (sender.type === \"player\" && targetEntity.type === \"enemy\") {\n      targetEntity.chargePlayer();\n    }\n  }\n\n  handleMove(enemy, sender) {\n    if (sender.type === \"player\") {\n      enemy.chargePlayer();\n    }\n  }\n\n  affectTarget(eventDetail) {\n    const { type, sender, target, value } = eventDetail;\n    const targetType = target.type;\n    const targetId = target.id;\n    const affectedEntities = this.entities\n      .filter((entity) => entity.type === targetType || entity.id === targetId)\n      .filter((entity) => entity.isAlive());\n\n    affectedEntities.forEach((entity) => {\n      switch (type) {\n        case \"attack\":\n          this.handleAttack(entity, sender, value, eventDetail);\n          break;\n\n        case \"moved\":\n          this.handleMove(entity, sender, value, eventDetail);\n          break;\n\n        default:\n          break;\n      }\n    });\n  }\n\n  listenToEvents() {\n    document.addEventListener(\"attack\", (event) => {\n      this.affectTarget(event.detail);\n    });\n\n    document.addEventListener(\"moved\", (event) => {\n      this.affectTarget(event.detail);\n    });\n  }\n}\n\nclass Game {\n  constructor(root) {\n    this.map = [];\n    this.players = [];\n    this.root = root || document.getElementById(\"root\");\n\n    this.initGame();\n  }\n\n  initGame() {\n    if (this.root) {\n      const map = new Map();\n\n      const htmlMap = map.generateHTMLMap();\n\n      const container = `<h1>Welcome to the Tactical Marines Naval Game</h1><div id=\"map\" class=\"map\">${htmlMap}</div>`;\n\n      this.root.innerHTML = container;\n\n      const mapElement = document.getElementById(\"map\");\n\n      if (!mapElement) {\n        console.error(\"Map element not found\");\n        return;\n      }\n\n      let walls = [];\n\n      const initialX = 2;\n      const length = 6;\n\n      for (let i = initialX; i < initialX + length; i++) {\n        const yTop = 3;\n        const yBottom = 8;\n        walls.push(new Wall(mapElement, map.getFields(), i, yTop));\n        walls.push(new Wall(mapElement, map.getFields(), i, yBottom));\n      }\n\n      const player = new Player(mapElement, map.getFields(), 1, 1);\n\n      if (!player) {\n        console.error(\"Player not created\");\n        return;\n      }\n\n      const enemy = new Enemy(mapElement, map.getFields(), 5, 5);\n\n      if (!enemy) {\n        console.error(\"Enemy not created\");\n        return;\n      }\n\n      const entities = [player, enemy, ...walls];\n\n      const gameEventListener = new GameEventListener(entities);\n\n      console.log(\"Event listener initialized:\", gameEventListener);\n\n      // const gameLoop = new GameLoop(map, entities);\n\n      // console.log(\"Game loop initialized:\", gameLoop);\n\n      console.log(\"Game initialized\");\n      console.log(\"//////////////\");\n    } else {\n      console.error(\"Root element not found\");\n      console.error(\":( :( :( :( :( :( :( :( :(\");\n    }\n  }\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const root = document.getElementById(\"root\");\n  if (root) {\n    const game = new Game(root);\n    console.log(\"Game instance created:\", game);\n  } else {\n    console.error(\"Root element not found\");\n  }\n});\n"],"names":[],"version":3,"file":"new-game.86da7ba5.js.map","sourceRoot":"/__parcel_source_root/"}